version: "3.8"

services:
  mongo1:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    networks:
      - private_locadora

  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    networks:
      - private_locadora

  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    networks:
      - private_locadora

  business-api:
    build:
      context: ./businessApi
      target: production
    ports:
      - 8000:8000
    networks:
      - private_locadora
    environment:
      - API_PORT=8000

  business-api2:
    build:
      context: ./businessApi
      target: production
    ports:
      - 8001:8001
    networks:
      - private_locadora
    environment:
      - API_PORT=8001

  business-api3:
    build:
      context: ./businessApi
      target: production
    ports:
      - 8002:8002
    networks:
      - private_locadora
    environment:
      - API_PORT=8002

  data-api:
    build:
      context: ./dataApi
      target: production
    networks:
      - private_locadora
    environment:
      - API_PORT=8010
    
  data-api2:
    build:
      context: ./dataApi
      target: production
    networks:
      - private_locadora
    environment:
      - API_PORT=8011

  data-api3:
    build:
      context: ./dataApi
      target: production
    networks:
      - private_locadora
    environment:
      - API_PORT=8012

  scheduler-api:
    build:
      context: ./schedulerApi
      target: production
    ports:
      - 8020:8020
    networks:
      - private_locadora
    environment:
      - API_PORT=8020
      - BUSINESS_API_PORT_1=127.0.0.1:8000/api-servico
      - BUSINESS_API_PORT_2=127.0.0.1:8001/api-servico
      - BUSINESS_API_PORT_3=127.0.0.1:8002/api-servico
      - DATA_API_PORT_1=data-api:8010/api-data
      - DATA_API_PORT_2=data-api2:8011/api-data
      - DATA_API_PORT_3=data-api3:8012/api-data

networks:
  private_locadora:
    driver: bridge

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config: